'''
# TODO: add docstring
'''
import os
import base64
from moviepy.editor import VideoFileClip, AudioFileClip
from pydub import AudioSegment

CWD = os.getcwd()

def main(video_filepath, time_dicts):
    '''
    video_filepath: a string path to mp4 video
    time_dicts: list of dicts containing:
        start: start time in seconds
        end: end time in seconds
        link: string to be embedded
        filepath: filepath to the ultrasound generated by the link
    '''
    # video setup
    original_audio = AudioSegment.from_file(video_filepath)
    original_audio_duration = original_audio.duration_seconds

    # rounded down to seconds
    original_audio_duration = original_audio_duration - original_audio_duration % 1

    # rounded down to 10s (ultrasound is 10s long)
    usable_audio_duration = original_audio_duration - original_audio_duration % 10

    # time checks on start/end
    check_time_list = []

    for time_dict in time_dicts:
        check_time_list.append(time_dict['start'])
        check_time_list.append(time_dict['end'])

    assert check_time_list[0] >= 0
    assert check_time_list[-1] <= usable_audio_duration

    for i in range(len(check_time_list) - 1):
        assert check_time_list[i] % 10 == 0

        if i%2 == 0:
            assert check_time_list[i] < check_time_list[i+1]
        else:
            assert check_time_list[i] <= check_time_list[i+1]

    # # # start overlaying process
    for time_dict in time_dicts:
        original_audio = overlay(original_audio, time_dict)

    # export output audio as wav for muxing
    # TODO:
    # figure out some way to convert from pydub AudioSegment to nump array,
    # then to moviepy AudioFileCLip to minimise file r/w
    temp_filename = base64.urlsafe_b64encode(video_filepath.encode('utf-8')).decode('utf-8') + '.wav'
    original_audio.export('{}/output_audio/{}'.format(CWD, temp_filename), format="wav")

    # read original video and output audio
    original_video = VideoFileClip(video_filepath)
    output_audio = AudioFileClip('{}/output_audio/{}'.format(CWD, temp_filename))


    # replace audio
    original_video.audio = output_audio

    # export video
    original_video.write_videofile(video_filepath.replace('uploaded_files', 'output_video'))

    # cleanup
    os.remove('{}/output_audio/{}'.format(CWD, temp_filename))

def overlay(original_audio, time_dict):
    '''
    original_audio: pydub AudioSegment of original audio
    time_dict: dict as described in main.

    overlays the link ultrasound on the original video
    '''

    start = time_dict['start']
    end = time_dict['end']
    link_audio = AudioSegment.from_wav(time_dict['filepath'])

    audio_idx = start
    while audio_idx < end:
        # TODO: link audio is currently 2.5s long. aiming to change to 10s.
        # temp workaround: loop audio 3 times (7.5s)
        original_audio = original_audio.overlay(link_audio, position=audio_idx*1000, times=3)

        audio_idx += 10

    return original_audio
